#!/usr/bin/env sh

# Deal with passed arguments
sync_only=false
if [ ! -z "$1" ] && [ "$1" = "sync" ]; then
	sync_only=true
fi

# Check for configuration file
if [ ! -f "./.oneway" ];
then
	echo ".oneway configuration file not found."
	exit 1
fi

# Load user settings
. ./.oneway

# Verify user settings
if [ -z "$user" ]; then
	user="$USER"
fi
if [ -z "$host" ]; then
	echo "'host' not found in .oneway file."
	exit 1
fi
if [ -z "$path" ]; then
	echo "'path' not found in .oneway file."
	exit 1
fi
if [ -z "$exclude" ]; then
	exclude=""
fi

# Set up master connection
establish() {
	mkdir -p ~/.ssh/ctl
	ssh -Nf -o ControlMaster=yes -o ControlPath="~/.ssh/ctl/%L-%r@%h:%p" -o ServerAliveInterval=60 "$user@$host"
}

sync() {
	rsync -rlptsz --exclude .oneway --exclude "$exclude" --update --delete -e "ssh -o 'ControlPath="~/.ssh/ctl/%L-%r@%h:%p"'" ./ "$user@$host:$path"
	echo "Sync complete at `date '+%_I:%M:%S %p'`"
}

# Clean up ssh connection
finally() {
	ssh -O exit -o ControlPath="~/.ssh/ctl/%L-%r@%h:%p" "$user@$host" > /dev/null 2>&1
	echo
	exit
}

if $sync_only; then
	echo -n "File change detected... "
	sync
	exit $?
fi

# Establish the connection
establish
trap finally INT
echo
echo "Authentication success. Waiting for file changes..."

# Synchronize files to remote platform
exec 3>&1 # Save the reference to stdout
while true; do
find . | entr -d $0 sync 2>&1 >&3 3>&- | grep -v -e "entr: directory altered" -e "entr: cannot open" 3>&-
done
exec 3>&- # Delete the reference to stdout

# Tidy up
finally
